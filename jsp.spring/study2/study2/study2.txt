계층화 아키텍처

1. Presentation Layer : view (jsp, mustache, tymeleaf)
	- 화면
	- JSP,mustache,tymeleaf는 템플릿 엔진 : HTML 만드는 도구
	
2. Controller Layer : Controller
	- 요청처리, 흐름제어
	(지금은 .jsp로 직접 요청하지만, 나중에는 jsp화면이 보이기 전에 여러가지 작업을 한 다음 jsp화면으로 이동)
	- Exception 처리

3. Business Layer : Service
	- 비즈니스 로직, Transaction
	
4. Persistence(영속성 : 영원히 속성이 유지됨) Layer : DAO
	- DB접근, 오로지 DB접근
	
5. Domain Layer : VO, DTO
	- DB에서 얻은 객체
--------------------------------------------------------------------------------------------------------

효율성(중요하지않음) : 시간(자바 파일 실행하는 시간 <<<<<<<DB데이터 가지고 오는 시간), 
		공간(JVM의 메모리 : 메모리를 다 못쓰기 때문에 신경안써도 상관없음 + GC(가비지 컬렉터가 정리)
유지보수(+확장)
	- 변경에 유연하다. (변경사항이 있을 때, 코드를 얼마나 바꿔야 하나..?)
	
--------------------------------------------------------------------------------------------------------
최종목표 : JSP에서 자바 소스코드 안 보여야 함(99%)
--------------------------------------------------------------------------------------------------------

Exception 처리

1. 
free는 비밀번호를 안 바꿈. 글 쓴 사람 확인용
member는 비밀번호도 그냥 update
id중복체크
	- id를 사용자가 입력. 근데 id는 PK
	- DB에 해당 id가 있는지 확인
	- 있으면 throw new BizDuplicateKeyException
	없으면 그냥 insert

2. Exception 꼭 적절히 처리해주세요.
	getMember했는데 DB에 없다 => BizNotFoundException
	update 쿼리 실행했는데 cnt가 0이다 => BizNotEffectedException
	
--------------------------------------------------------------------------------------------------------
SingleTon(싱글톤)
FreeBoardServiceImpl, DaoOracle같은 구현체들은 SingleTon으로 만드는게 좋다.
아무클래스나 싱글톤으로 하면되나??? // 정해진 정답은 없다.
보통은 데이터를 저장하지 않고, 특정 기능만 수행하는 클래스들은 SingleTon으로 만드는게 좋겠지~(Service,Dao)
데이터를 저장해야 되는 클래스들은 객체를 여러개 만들어야지(VO는 never 싱글톤으로 하지 않아요)




